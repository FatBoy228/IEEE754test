#include <iostream>
#include <fstream>
#include <iostream>
#include <sstream>
#include <bitset>
#include <fstream>
#include <iostream>
#include <cstdlib>
#include <string>
using namespace std;
//Функция записи числа в бинарный файл inBin(ваше число, "называние файла")
void inBin(float a, string s) {
	ofstream out(s, ios::binary); //создаём поток в бинарный файл
	out.write((char*)&a, sizeof(a)); //записываем в бинарный файл
	out.close(); // закрываем поток(чтобы небыло мусора и всё незабагалось)
}
//Функция чтения  бинарного файла с выводом на консоль числа в битовом представлении outBin("название файла")
string outBin(string s) {
	ifstream ifs(s, ios::binary);// содали поток из бинарного файла
	ostringstream oss;  //создаём вспомогательный объект класса ostringstream для преобразования данных из потока в строковый вид
	string str, str1;
	unsigned char n; //переменная для посимвольного чтения(присваивается каждый новый символ в цикле)
	str1 = "";
	while (true)
	{
		ifs.read((char*)&n, 1);//посимвольно считываем поток  (1 байт = 8 бит = 1символ)
		if (ifs.eof())    //пока не достигнут конец - читаем, иначе ливаем с цикла
			break;
		oss << bitset<8>(n);  //извлекаем первый байт, тоесть первые 8 бит - с помощью контейнера bitset для хранения битов
		str = oss.str();  //преобразуем в строковый вид наши биты  с помощью метода str()
		str1 = str + str1; //строим последовательность битов в строку(конкатенация строк)
		oss.str(""); //обнуляем наш потоковый объект для записи следующих 8 бит
	}
	ifs.close();
	return str1;
}
void read(string s) {
	float a;
	ifstream ifs(s, ios::binary);
	while (!ifs.eof())
	{
		ifs.read((char*)&a, sizeof(a));
	}
	cout << a;
	ifs.close();
}
void bitToNumber(string str) {
	int b[8];
	float d;
	int E = 0;
	int unsigned M = 0;
	long step[23];
	float null = 0.0;
	typedef float fp32;
	fp32 p_inf;
	step[0] = 1;
	step[1] = 2;
	for (int i = 2; i < 23; i++) {
		step[i] = step[i - 1] * 2;
	}
	for (int i = 1; i < 9; i++) {
		E += ((str[i] - '0') * step[8 - i]);
	}
	for (int i = 9; i < 32; i++) {
		M += ((str[i] - '0') * step[31 - i]);
	}
	if (E == 255) {
		if ((M / pow(2, 23)) == 0) {
			if ((str[0] - '0') == 0) {
				cout << 1.0 / null;
			}
			else cout << -1.0 / null;
		}
		else if ((str[0] - '0') == 0) {
			cout << -(1.0 / null) + (1.0 / null) << " - тихий NaN";
		}
		else cout << (1.0 / null) / (1.0 / null) <<" - тихий NaN";
	}
	else if (E == 0) {
		cout << pow(-1, (str[0] - '0')) * pow(2, E - 127) * M / pow(2, 23) << " -> это субнормальное число";
	}
	else
		cout << pow(-1, (str[0] - '0')) * pow(2, E - 127) * (1 + M / pow(2, 23)) << endl;
}
void numberToBit(float d) {
	inBin(d, "out.dat"); // запись в файл
	string str = outBin("out.dat");//чтение из файла 
	cout << str[0];
	for (int i = 1; i < 9; i++) {
		cout << str[i];
	}

	for (int i = 9; i < 32; i++) {
		cout << str[i];
	}
	cout << endl;
}
void main()
{
	setlocale(LC_ALL, "rus");
	float d;
	int in = 0;
	string str;
	cout << "0-последовательно. 1 - число. 2-Битовая строка. " << endl;
	cin >> in;
	switch (in) {
	case 1:
		cout << "Ввeдите вещественное число: ";
		cin >> d;
		cout << endl;
		numberToBit(d);
		cout << endl;
		cout << endl;
		break;
	case 2:
		cout << "Введите битовую строку" << endl;
		cin >> str;
		bitToNumber(str);
		cout << endl;
		cout << "Сравним с прямым присвоением: ";
		read("out.dat");
		cout << endl;
		break;
	case 0:
		cout << "Ввeдите вещественное число: ";
		cin >> d;
		cout << endl;
		numberToBit(d);
		cout << endl;
		cout << endl;
		cout << "Введите битовую строку" << endl;
		cin >> str;
		cout << endl;
		cout << "Восстановленное число: ";
		bitToNumber(str);
		cout << "Сравним с прямым присвоением: ";
		read("out.dat");
		cout << endl;
	default:
		break;
	}
}







